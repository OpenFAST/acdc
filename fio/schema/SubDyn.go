package schema

var SubDyn = RegisterSchemas("SubDyn", []Schema{
	{Type: Header, Desc: "SubDyn Input File"},
	{Name: "Title", Type: Title},
	{Type: Header, Desc: "Simulation Control"},
	{Name: "Echo", Type: Bool, Desc: `Echo input data to "<rootname>.SD.ech"`, Unit: "flag"},
	{Name: "SDdeltaT", Type: FloatDefault, Desc: `Local Integration Step. If "default", the glue-code integration step will be used.`},
	{Name: "IntMethod", Type: Int, Desc: `Integration Method [1/2/3/4 = RK4/AB4/ABM4/AM2].`},
	{Name: "SttcSolve", Type: Bool, Desc: `Solve dynamics about static equilibrium point`},
	{Name: "GuyanLoadCorrection", Type: Bool, Desc: `Include extra moment from lever arm at interface and rotate FEM for floating.`},
	{Type: Header, Desc: `Fea And Craig-Bampton Parameters`},
	{Name: "FEMMod", Type: Int, Desc: `FEM switch: element model in the FEM. [1= Euler-Bernoulli(E-B);  2=Tapered E-B (unavailable);  3= 2-node Timoshenko;  4= 2-node tapered Timoshenko (unavailable)]`},
	{Name: "NDiv", Type: Int, Desc: `Number of sub-elements per member`},
	{Name: "CBMod", Type: Bool, Desc: `[T/F] If True perform C-B reduction, else full FEM dofs will be retained. If True, select Nmodes to retain in C-B reduced system.`},
	{Name: "Nmodes", Type: Int, Desc: `Number of internal modes to retain (ignored if CBMod=False). If Nmodes=0 --> Guyan Reduction.`},
	{Name: "JDampings", Type: Floats, NumVar: "Nmodes", Desc: `Damping Ratios for each retained mode (% of critical) If Nmodes>0, list Nmodes structural damping ratios for each retained mode (% of critical), or a single damping ratio to be applied to all retained modes. (last entered value will be used for all remaining modes).`},
	{Name: "GuyanDampMod", Type: Int, Desc: `Guyan damping {0=none, 1=Rayleigh Damping, 2=user specified 6x6 matrix}`},
	{Name: "RayleighDamp", Type: Floats, NumInt: 2, Desc: `Mass and stiffness proportional damping  coefficients (Rayleigh Damping) [only if GuyanDampMod=1]`},
	{Name: "GuyanDampSize", Type: Int, Desc: `Guyan damping matrix (6x6) [only if GuyanDampMod=2]`},
	{Name: "GuyanDampMatrix", Type: Table, NumVar: "GuyanDampSize",
		TableHeaderSize: 0,
		TableColumns: []Column{
			{Name: "C1", Type: Float},
			{Name: "C2", Type: Float},
			{Name: "C3", Type: Float},
			{Name: "C4", Type: Float},
			{Name: "C5", Type: Float},
			{Name: "C6", Type: Float},
		}},
	{Type: Header, Desc: `STRUCTURE JOINTS: joints connect structure members (~Hydrodyn Input File)`},
	{Name: "NJoints", Type: Int, Desc: `Number of joints`},
	{Name: "Joints", Type: Table, NumVar: "NJoints",
		TableHeaderSize: 2,
		TableColumns: []Column{
			{Name: "JointID", Type: Int, Unit: "-"},
			{Name: "JointXss", Type: Float, Unit: "m"},
			{Name: "JointYss", Type: Float, Unit: "m"},
			{Name: "JointZss", Type: Float, Unit: "m"},
			{Name: "JointType", Type: Int, Unit: "-"},
			{Name: "JointDirX", Type: Float, Unit: "-"},
			{Name: "JointDirY", Type: Float, Unit: "-"},
			{Name: "JointDirZ", Type: Float, Unit: "-"},
			{Name: "JointStiff", Type: Float, Unit: "Nm/rad"},
		}},
	{Type: Header, Desc: `Base Reaction Joints: 1/0 For Locked/Free Dof @ Each Reaction Node `},
	{Name: "NReact", Type: Int, Desc: `Number of Joints with reaction forces; be sure to remove all rigid motion DOFs of the structure  (else det([K])=[0])`},
	{Name: "React", Type: Table, NumVar: "NReact",
		TableHeaderSize: 2,
		TableColumns: []Column{
			{Name: "RJointID", Type: Int, Unit: "-"},
			{Name: "RctTDXss", Type: Int, Unit: "flag"},
			{Name: "RctTDYss", Type: Int, Unit: "flag"},
			{Name: "RctTDZss", Type: Int, Unit: "flag"},
			{Name: "RctRDXss", Type: Int, Unit: "flag"},
			{Name: "RctRDYss", Type: Int, Unit: "flag"},
			{Name: "RctRDZss", Type: Int, Unit: "flag"},
			{Name: "SSIfile", Type: String, Unit: "string"},
		}},
	{Type: Header, Desc: `INTERFACE JOINTS: 1/0 for Locked (to the TP)/Free DOF @each Interface Joint (only Locked-to-TP implemented thus far (=rigid TP))`},
	{Name: "NInterf", Type: Int, Desc: `Number of interface joints locked to the Transition Piece (TP):  be sure to remove all rigid motion dofs`},
	{Name: "Interf", Type: Table, NumVar: "NInterf",
		TableHeaderSize: 2,
		TableColumns: []Column{
			{Name: "IJointID", Type: Int, Unit: "-"},
			{Name: "ItfTDXss", Type: Int, Unit: "flag"},
			{Name: "ItfTDYss", Type: Int, Unit: "flag"},
			{Name: "ItfTDZss", Type: Int, Unit: "flag"},
			{Name: "ItfRDXss", Type: Int, Unit: "flag"},
			{Name: "ItfRDYss", Type: Int, Unit: "flag"},
			{Name: "ItfRDZss", Type: Int, Unit: "flag"},
		}},
	{Type: Header, Desc: `Members`},
	{Name: "NMembers", Type: Int, Desc: `Number of frame members`},
	{Name: "Members", Type: Table, NumVar: "NMembers",
		TableHeaderSize: 2,
		TableColumns: []Column{
			{Name: "MemberID", Type: Int, Unit: "-"},
			{Name: "MJointID1", Type: Int, Unit: "-"},
			{Name: "MJointID2", Type: Int, Unit: "-"},
			{Name: "MPropSetID1", Type: Int, Unit: "-"},
			{Name: "MPropSetID2", Type: Int, Unit: "-"},
			{Name: "MType", Type: Int, Unit: "-"},
			{Name: "COSMID", Type: Int, Unit: "-"},
		}},
	{Type: Header, Desc: `Member X-Section Property Data 1/2 [Isotropic Material For Now: Use This Table For Circular-Tubular Elements] `},
	{Name: "NPropSets", Type: Int, Desc: `Number of structurally unique x-sections (i.e. how many groups of X-sectional properties are utilized throughout all of the members)`},
	{Name: "PropSets", Type: Table, NumVar: "NPropSets",
		TableHeaderSize: 2,
		TableColumns: []Column{
			{Name: "PropSetID", Type: Float, Unit: "-"},
			{Name: "YoungE", Type: Float, Unit: "N/m2"},
			{Name: "ShearG", Type: Float, Unit: "N/m2"},
			{Name: "MatDens", Type: Float, Unit: "kg/m3"},
			{Name: "XsecD", Type: Float, Unit: "m"},
			{Name: "XsecT", Type: Float, Unit: "m"},
		}},
	{Type: Header, Desc: `Member X-Section Property Data 2/2 [Isotropic Material For Now: Use This Table If Any Section Other Than Circular, However Provide Cosm(I,J) Below] `},
	{Name: "NXPropSets", Type: Int, Desc: `Number of structurally unique non-circular x-sections (if 0 the following table is ignored)`},
	{Name: "XPropSets", Type: Table, NumVar: "NXPropSets",
		TableHeaderSize: 2,
		TableColumns: []Column{
			{Name: "PropSetID", Type: Int, Unit: "-"},
			{Name: "YoungE", Type: Float, Unit: "N/m2"},
			{Name: "ShearG", Type: Float, Unit: "N/m2"},
			{Name: "MatDens", Type: Float, Unit: "kg/m3"},
			{Name: "XsecA", Type: Float, Unit: "m2"},
			{Name: "XsecAsx", Type: Float, Unit: "m2"},
			{Name: "XsecAsy", Type: Float, Unit: "m2"},
			{Name: "XsecJxx", Type: Float, Unit: "m4"},
			{Name: "XsecJyy", Type: Float, Unit: "m4"},
			{Name: "XsecJ0", Type: Float, Unit: "m4"},
		}},
	{Type: Header, Desc: `Cable Properties  `},
	{Name: "NCablePropSets", Type: Int, Desc: `Number of cable cable properties`},
	{Name: "CablePropSets", Type: Table, NumVar: "NCablePropSets",
		TableHeaderSize: 2,
		TableColumns: []Column{
			{Name: "PropSetID", Type: Int, Unit: "-"},
			{Name: "EA", Type: Float, Unit: "N"},
			{Name: "MatDens", Type: Float, Unit: "kg/m"},
			{Name: "T0", Type: Float, Unit: "N"},
			{Name: "CtrlChannel", Type: Int, Unit: "-"},
		}},
	{Type: Header, Desc: `Rigid Link Properties `},
	{Name: "NRigidPropSets", Type: Int, Desc: `Number of rigid link properties`},
	{Name: "RigidPropSets", Type: Table, NumVar: "NRigidPropSets",
		TableHeaderSize: 2,
		TableColumns: []Column{
			{Name: "PropSetID", Type: Int, Unit: "-"},
			{Name: "EA", Type: Float, Unit: "N"},
			{Name: "MatDens", Type: Float, Unit: "kg/m"},
		}},
	{Type: Header, Desc: `Member Cosine Matrices Cosm(I,J) `},
	{Name: "NCOSMs", Type: Int, Desc: `Number of unique cosine matrices (i.e., of unique member alignments including principal axis rotations); ignored if NXPropSets=0   or 9999 in any element below`},
	{Name: "COSMs", Type: Table, NumVar: "NCOSMs",
		TableHeaderSize: 2,
		TableColumns: []Column{
			{Name: "COSMID", Type: Int, Unit: "-"},
			{Name: "COSM11", Type: Float, Unit: "-"},
			{Name: "COSM12", Type: Float, Unit: "-"},
			{Name: "COSM13", Type: Float, Unit: "-"},
			{Name: "COSM21", Type: Float, Unit: "-"},
			{Name: "COSM22", Type: Float, Unit: "-"},
			{Name: "COSM23", Type: Float, Unit: "-"},
			{Name: "COSM31", Type: Float, Unit: "-"},
			{Name: "COSM32", Type: Float, Unit: "-"},
			{Name: "COSM33", Type: Float, Unit: "-"},
		}},
	{Type: Header, Desc: `Joint Additional Concentrated Masses`},
	{Name: "NCmass", Type: Int, Desc: `Number of joints with concentrated masses; Global Coordinate System`},
	{Name: "Cmass", Type: Table, NumVar: "NCmass",
		TableHeaderSize: 2,
		TableColumns: []Column{
			{Name: "CMJointID", Type: Int, Unit: "-"},
			{Name: "JMass", Type: Float, Unit: "kg"},
			{Name: "JMXX", Type: Float, Unit: "kg*m^2"},
			{Name: "JMYY", Type: Float, Unit: "kg*m^2"},
			{Name: "JMZZ", Type: Float, Unit: "kg*m^2"},
			{Name: "JMXY", Type: Float, Unit: "kg*m^2"},
			{Name: "JMXZ", Type: Float, Unit: "kg*m^2"},
			{Name: "JMYZ", Type: Float, Unit: "kg*m^2"},
			{Name: "MCGX", Type: Float, Unit: "m"},
			{Name: "MCGY", Type: Float, Unit: "m"},
			{Name: "MCGZ", Type: Float, Unit: "m"},
		}},
	{Type: Header, Desc: `Output: Summary & Outfile `},
	{Name: "SumPrint", Type: Bool, Desc: `Output a Summary File .It contains: matrices K,M  and C-B reduced M_BB, M-BM, K_BB, K_MM(OMG^2), PHI_R, PHI_L. It can also contain COSMs if requested.`, Unit: "flag"},
	{Name: "OutCBModes", Type: Int, Desc: `Output Guyan and Craig-Bampton modes {0: No output, 1: JSON output}`, Unit: "flag"},
	{Name: "OutFEMModes", Type: Int, Desc: `Output first 30 FEM modes {0: No output, 1: JSON output}`, Unit: "flag"},
	{Name: "OutCOSM", Type: Bool, Desc: `Output cosine matrices with the selected output member forces`, Unit: "flag"},
	{Name: "OutAll", Type: Bool, Desc: `[T/F] Output all members' end forces`},
	{Name: "OutSwtch", Type: Int, Desc: `[1/2/3] Output requested channels to: 1=<rootname>.SD.out;  2=<rootname>.out (generated by FAST);  3=both files.`},
	{Name: "TabDelim", Type: Bool, Desc: `Generate a tab-delimited output in the <rootname>.SD.out file`},
	{Name: "OutDec", Type: Int, Desc: `Decimation of output in the <rootname>.SD.out file`},
	{Name: "OutFmt", Type: String, Desc: `Output format for numerical results in the <rootname>.SD.out file`},
	{Name: "OutSFmt", Type: String, Desc: `Output format for header strings in the <rootname>.SD.out file`},
	{Type: Header, Desc: `Member Output List `},
	{Name: "NMOutputs", Type: Int, Desc: `Number of members whose forces/displacements/velocities/accelerations will be output [Must be <= 9].`},
	{Name: "MOutputs", Type: Table, NumVar: "NMOutputs",
		TableHeaderSize: 2,
		TableColumns: []Column{
			{Name: "MemberID", Type: Int, Unit: "-"},
			{Name: "NOutCnt", Type: Int, Unit: "-"},
			{Name: "NodeCnt", Type: Int, Unit: "-"},
		}},
	{Type: Header, Desc: `SSOutList: The next line(s) contains a list of output parameters that will be output in <rootname>.SD.out or <rootname>.out.`},
	{Name: "OutList", Type: OutList2},
})
